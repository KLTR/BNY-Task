{"version":3,"sources":["./node_modules/ng2-currency-mask/__ivy_ngcc__/fesm2015/ng2-currency-mask.js","./src/app/orders/order-add/order-add.component.ts","./src/app/orders/order-add/order-add.component.html","./src/app/orders/orders-list/orders-list.component.ts","./src/app/orders/orders-list/orders-list.component.html","./src/app/orders/orders-routing.module.ts","./src/app/orders/orders.component.ts","./src/app/orders/orders.component.html","./src/app/orders/orders.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoJ;AACxG;AACmC;AAChC;;AAEP;AACxC,+BAA+B,4DAAc;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+DAA+D;AAC5E;AACA;AACA;AACA;AACA;AACA,qHAAqH,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qBAAqB;AACluBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,wEAAwE,yCAAyC,+DAAwB,2BAA2B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,6DAAsB,GAAG;AACnQ,6BAA6B,+DAAwB,EAAE,yIAAyI;AAChM,QAAQ,wDAAiB,yEAAyE,+BAA+B,EAAE,4EAA4E,gCAAgC,EAAE,wEAAwE,8BAA8B,EAAE,4EAA4E,gCAAgC,EAAE,gFAAgF,kCAAkC,EAAE,kFAAkF,mCAAmC,EAAE,4EAA4E,gCAAgC,EAAE,4EAA4E,gCAAgC,EAAE;AAC94B,KAAK,EAAE,WAAW,6CAA6C,aAAa,gEAAyB;AACrG;AACA,aAAa,UAAU,4DAAa;AACpC,aAAa;AACb;AACA,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,iCAAiC,GAAG;AAC1G,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,6DAAe;AAC3B;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,2DAAK;AACT;AACA,wDAAU;AACV,IAAI,kEAAY;AAChB;AACA,wDAAU;AACV,IAAI,kEAAY;AAChB;AACA,wDAAU;AACV,IAAI,kEAAY;AAChB;AACA,wDAAU;AACV,IAAI,kEAAY;AAChB;AACA,wDAAU;AACV,IAAI,kEAAY;AAChB;AACA,wDAAU;AACV,I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","file":"orders-orders-module.js","sourcesContent":["import { InjectionToken, forwardRef, Optional, Inject, ElementRef, KeyValueDiffers, Input, HostListener, Directive, NgModule } from '@angular/core';\nimport { __decorate, __param } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = (selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/)) ? true : false;\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.getSelection().anchorNode;\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue;\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n    addNumber(keyCode) {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n    applyMask(isNumber, rawValue) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n        if (!onlyNumbers) {\n            return \"\";\n        }\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = (rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    clearMask(rawValue) {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n    changeToPositive() {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n    fixCursorPosition(forceToEndPosition) {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        }\n        else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n    getRawValueWithoutSuffixEndPosition() {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n    getRawValueWithoutPrefixStartPosition() {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n            //delete key and the target digit is the decimal or thousands divider\n            if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n            //backspace key and the target digit is the decimal or thousands divider\n            if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n    updateFieldValue(selectionStart) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n    handleClick(event, chromeAndroid) {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n    handleCut(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            }\n            else {\n                this.setValue(null);\n            }\n        }\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeydown(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    handleKeypress(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeyup(event) {\n        this.inputService.fixCursorPosition();\n    }\n    handlePaste(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    getNewKeyCode(oldString, newString) {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n    }\n    isArrowEndHomeKeyInFirefox(event) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n        return false;\n    }\n    isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n    setCursorPosition(event) {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        setTimeout(function () {\n            event.target.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}\n\nvar CurrencyMaskDirective_1;\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true\n};\nlet CurrencyMaskDirective = CurrencyMaskDirective_1 = class CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n        this.currencyMaskConfig = currencyMaskConfig;\n        this.elementRef = elementRef;\n        this.keyValueDiffers = keyValueDiffers;\n        this.options = {};\n        this.optionsTemplate = {\n            align: \"right\",\n            allowNegative: true,\n            decimal: \".\",\n            precision: 2,\n            prefix: \"$ \",\n            suffix: \"\",\n            thousands: \",\"\n        };\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n    }\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n    handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n    handleClick(event) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n    handleCut(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n    handleInput(event) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n    handleKeyup(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n    handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n    isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n    registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n    }\n    validate(abstractControl) {\n        let result = {};\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n        return result != {} ? result : null;\n    }\n    writeValue(value) {\n        this.inputHandler.setValue(value);\n    }\n};\nCurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) { return new (t || CurrencyMaskDirective)(ɵngcc0.ɵɵdirectiveInject(CURRENCY_MASK_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers)); };\nCurrencyMaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CurrencyMaskDirective, selectors: [[\"\", \"currencyMask\", \"\"]], hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) { return ctx.handleBlur($event); })(\"click\", function CurrencyMaskDirective_click_HostBindingHandler($event) { return ctx.handleClick($event); })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) { return ctx.handleCut($event); })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) { return ctx.handleKeypress($event); })(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) { return ctx.handleKeyup($event); })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) { return ctx.handlePaste($event); });\n    } }, inputs: { options: \"options\", max: \"max\", min: \"min\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR,\n            { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective_1, multi: true }\n        ])] });\nCurrencyMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CURRENCY_MASK_CONFIG,] }] },\n    { type: ElementRef },\n    { type: KeyValueDiffers }\n];\n__decorate([\n    Input()\n], CurrencyMaskDirective.prototype, \"max\", void 0);\n__decorate([\n    Input()\n], CurrencyMaskDirective.prototype, \"min\", void 0);\n__decorate([\n    Input()\n], CurrencyMaskDirective.prototype, \"options\", void 0);\n__decorate([\n    HostListener(\"blur\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handleBlur\", null);\n__decorate([\n    HostListener(\"click\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handleClick\", null);\n__decorate([\n    HostListener(\"cut\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handleCut\", null);\n__decorate([\n    HostListener(\"input\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handleInput\", null);\n__decorate([\n    HostListener(\"keydown\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handleKeydown\", null);\n__decorate([\n    HostListener(\"keypress\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handleKeypress\", null);\n__decorate([\n    HostListener(\"keyup\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handleKeyup\", null);\n__decorate([\n    HostListener(\"paste\", [\"$event\"])\n], CurrencyMaskDirective.prototype, \"handlePaste\", null);\nCurrencyMaskDirective = CurrencyMaskDirective_1 = __decorate([ __param(0, Optional()), __param(0, Inject(CURRENCY_MASK_CONFIG))\n], CurrencyMaskDirective);\n\nlet CurrencyMaskModule = class CurrencyMaskModule {\n};\nCurrencyMaskModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CurrencyMaskModule });\nCurrencyMaskModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CurrencyMaskModule_Factory(t) { return new (t || CurrencyMaskModule)(); }, imports: [[\n            CommonModule,\n            FormsModule\n        ]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CurrencyMaskDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[currencyMask]\",\n                providers: [\n                    CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR,\n                    { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective_1, multi: true }\n                ]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CURRENCY_MASK_CONFIG]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.KeyValueDiffers }]; }, { options: [{\n            type: Input\n        }], handleBlur: [{\n            type: HostListener,\n            args: [\"blur\", [\"$event\"]]\n        }], handleClick: [{\n            type: HostListener,\n            args: [\"click\", [\"$event\"]]\n        }], handleCut: [{\n            type: HostListener,\n            args: [\"cut\", [\"$event\"]]\n        }], handleInput: [{\n            type: HostListener,\n            args: [\"input\", [\"$event\"]]\n        }], handleKeydown: [{\n            type: HostListener,\n            args: [\"keydown\", [\"$event\"]]\n        }], handleKeypress: [{\n            type: HostListener,\n            args: [\"keypress\", [\"$event\"]]\n        }], handleKeyup: [{\n            type: HostListener,\n            args: [\"keyup\", [\"$event\"]]\n        }], handlePaste: [{\n            type: HostListener,\n            args: [\"paste\", [\"$event\"]]\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CurrencyMaskModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [CommonModule,\n        FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CurrencyMaskModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule\n                ],\n                declarations: [\n                    CurrencyMaskDirective\n                ],\n                exports: [\n                    CurrencyMaskDirective\n                ]\n            }]\n    }], null, null); })();\n\n/*\n * Public API Surface of currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };\n\n//# sourceMappingURL=ng2-currency-mask.js.map","import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {ICustomer, IOrder, IOrderItem, IState} from '../../shared/interfaces';\nimport {DataService} from '../../core/services/data-service/data.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {GrowlerMessageType, GrowlerService} from '../../core/growler/growler.service';\nimport {IModalContent, ModalService} from '../../core/modal/modal.service';\nimport {NgForm} from '@angular/forms';\nimport {LoggerService} from '../../core/services/logger.service';\nimport {TrackByService} from '../../core/services/trackby.service';\n\n@Component({\n  selector: 'cm-order-add',\n  templateUrl: './order-add.component.html',\n  styleUrls: ['./order-add.component.css']\n})\nexport class OrderAddComponent implements OnInit, OnDestroy {\n  order: IOrder =\n    {\n      productName: '',\n      itemCost: null,\n    };\n  orders: IOrder[] = [];\n  selectedCustomerId: number;\n  customers: ICustomer[];\n  orderTotal = 0;\n  errorMessage: string;\n  id: number;\n  private sub: any;\n\n  @ViewChild('orderForm', {static: true}) orderForm: NgForm;\n\n  constructor(private dataService: DataService,\n              private router: Router,\n              private modalService: ModalService,\n              private growler: GrowlerService,\n              private logger: LoggerService,\n              private route: ActivatedRoute,\n              public trackbyService: TrackByService) {\n  }\n\n  ngOnInit(): void {\n    this.dataService.getCustomers().subscribe((customers: ICustomer[]) => {\n      this.customers = customers;\n      this.updateId();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  updateId() {\n    this.sub = this.route.params.subscribe(params => {\n      // (+) converts string 'id' to a number\n      const id = +params['id'];\n      this.customers.map(customer => customer.id).includes(id) ? this.selectedCustomerId = id : this.selectedCustomerId = null;\n    });\n  }\n\n  cancel(event: Event) {\n    event.preventDefault();\n    // Route guard will take care of showing modal dialog service if data is dirty\n    this.router.navigate(['/orders']);\n  }\n\n  submit() {\n    this.dataService.inserOrder(this.selectedCustomerId, this.orders)\n      .subscribe((insertedOrder: IOrder[]) => {\n          if (insertedOrder) {\n            // Mark form as pristine so that CanDeactivateGuard won't prompt before navigation\n            this.orderForm.form.markAsPristine();\n            this.growler.growl('Order was added :)', GrowlerMessageType.Info);\n            this.router.navigate(['/orders']);\n          } else {\n            const msg = 'Unable to insert order';\n            this.growler.growl(msg, GrowlerMessageType.Danger);\n            this.errorMessage = msg;\n          }\n        },\n        (err: any) => this.logger.log(err));\n\n  }\n\n  addItem() {\n    // Add recent item to orders list and reset fields and models (besides customer)\n    this.orders.push(this.order);\n    this.orderTotal += this.order.itemCost;\n    this.order = {\n      productName: '',\n      itemCost: null,\n    };\n    this.orderForm.controls['productName'].reset();\n    this.orderForm.controls['itemCost'].reset();\n\n  }\n\n  canDeactivate(): Promise<boolean> | boolean {\n    if (!this.orderForm.dirty) {\n      return true;\n    }\n\n    // Dirty show display modal dialog to user to confirm leaving\n    const modalContent: IModalContent = {\n      header: 'Lose Unsaved Changes?',\n      body: 'You have unsaved changes! Would you like to leave the page and lose them?',\n      cancelButtonText: 'Cancel',\n      OKButtonText: 'Leave'\n    };\n    return this.modalService.show(modalContent);\n  }\n}\n","<div>\n  <form (ngSubmit)=\"submit()\" #orderForm=\"ngForm\" class=\"customer-form\" novalidate>\n    <div class=\"form-group\">\n      <label>Customer</label>\n      <select class=\"form-control\"\n              [(ngModel)]=\"selectedCustomerId\"\n              name=\"customer\"\n              required>\n        <option [ngValue]=\"0\" disabled>Select Customer</option>\n        <option *ngFor=\"let customer of customers\"\n                [ngValue]=\"customer.id\">{{customer.firstName | capitalize}} {{customer.lastName | capitalize}}</option>\n      </select>\n    </div>\n    <ng-container *ngIf=\"selectedCustomerId\">\n      <div class=\"row\">\n        <div class=\"form-group col-md-6\">\n          <label>Product Name</label>\n          <input  type=\"text\" class=\"form-control prodName\" name=\"productName\" required [(ngModel)]=\"order.productName\"\n                 #productName=\"ngModel\">\n          <div class=\"alert alert-danger\" [hidden]=\"productName.pristine || productName.valid\">Product Name is required\n          </div>\n        </div>\n        <div class=\"form-group col-md-6\">\n          <label>Product Price</label>\n          <input type=\"text\"\n                 class=\"form-control itemCost\"\n                 name=\"itemCost\"\n                 ppOnlyNumber=\"true\"\n                 currencyMask\n                 [options]=\"{align: 'left', precision: 2, allowNegative: false}\" [(ngModel)]=\"order.itemCost\"\n                 #itemCost=\"ngModel\" required>\n          <div class=\"alert alert-danger\" [hidden]=\"itemCost.pristine || itemCost.valid\">Product price is required</div>\n        </div>\n      </div>\n      <ng-container *ngIf=\"orders.length\">\n        <table class=\"table table-striped table-hover\">\n          <tr *ngFor=\"let order of orders;trackBy:trackbyService.order\">\n            <td>{{order.productName}}</td>\n            <td class=\"text-right\">{{ order.itemCost | currency:'USD':'symbol' }}</td>\n          </tr>\n          <tr class=\"summary-border\">\n            <td>&nbsp;</td>\n            <td class=\"text-right\">{{ orderTotal | currency:'USD':'symbol' }}\n          </tr>\n        </table>\n      </ng-container>\n      <div class=\"pull-right\">\n        <button class=\"btn btn-default\" (click)=\"cancel($event)\">Cancel</button>&nbsp;\n        <button class=\"btn btn-primary add-btn\" (click)=\"addItem()\" [disabled]=\"orderForm.pristine || !orderForm.valid\">Add Item\n        </button>\n        <button type=\"submit\" class=\"btn btn-success\"\n                [disabled]=\"orders.length === 0\">Insert List\n        </button>\n      </div>\n    </ng-container>\n  </form>\n  <br/>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {ICustomer, IPagedResults} from '../../shared/interfaces';\nimport {DataService} from '../../core/services/data-service/data.service';\nimport {TrackByService} from '../../core/services/trackby.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'cm-orders-list',\n  templateUrl: './orders-list.component.html',\n  styleUrls: ['./orders-list.component.css']\n})\nexport class OrdersListComponent implements OnInit {\n\n  customers: ICustomer[];\n  totalRecords = 0;\n  pageSize = 5;\n\n\n\n  constructor(private dataService: DataService, public trackbyService: TrackByService, public router: Router) { }\n\n  ngOnInit() {\n    this.getCustomersPage(1);\n  }\n\n  pageChanged(page: number) {\n    this.getCustomersPage(page);\n  }\n\n  getCustomersPage(page: number) {\n    this.dataService.getCustomersPage((page - 1) * this.pageSize, this.pageSize)\n      .subscribe((response: IPagedResults<ICustomer[]>) => {\n        this.totalRecords = response.totalRecords;\n        this.customers = response.results;\n      });\n  }\n\n}\n","<div class=\"container\">\n  <div *ngIf=\"customers\">\n\n    <div class=\"row\" *ngFor=\"let customer of customers;trackBy:trackbyService.customer\">\n      <div class=\"flex-row\">\n        <h4>{{ customer.firstName | capitalize }} {{ customer.lastName | capitalize }}</h4>\n        <button class=\"btn btn-light btn-sm\" (click)=\"router.navigate(['/orders/add', customer.id])\" >Add Order</button>\n      </div>\n      <br />\n      <table *ngIf=\"customer.orders && customer.orders.length\" class=\"table table-striped table-hover orders-table\">\n        <tr *ngFor=\"let order of customer.orders;trackBy:trackbyService.order\">\n          <td>{{order.productName}}</td>\n          <td class=\"text-right\">{{ order.itemCost | currency:'USD':'symbol' }}</td>\n        </tr>\n        <tr class=\"summary-border\">\n          <td>&nbsp;</td>\n          <td class=\"text-right\">{{ customer.orderTotal | currency:'USD':'symbol' }}\n        </tr>\n      </table>\n      <div *ngIf=\"!customer.orders || !customer.orders.length\">\n        No orders found\n      </div>\n    </div>\n\n    <cm-pagination [hidden]=\"!customers\"\n                   [totalItems]=\"totalRecords\"\n                   [pageSize]=\"pageSize\"\n                   (pageChanged)=\"pageChanged($event)\"></cm-pagination>\n\n  </div>\n  <div *ngIf=\"!customers\">\n    No customers found\n  </div>\n</div>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {OrdersComponent} from './orders.component';\nimport {OrderAddComponent} from './order-add/order-add.component';\nimport {OrdersListComponent} from './orders-list/orders-list.component';\nimport {CanActivateGuard} from '../shared/guards/can-activate.guard';\nimport {CanDeactivateGuard} from '../shared/guards/can-deactivate.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrdersComponent,\n    children: [\n      {path: '', redirectTo: 'list', pathMatch: 'full'},\n      {path: 'list', component: OrdersListComponent},\n      {\n        path: 'add/:id',\n        component: OrderAddComponent,\n        canActivate: [CanActivateGuard],\n        canDeactivate: [CanDeactivateGuard]\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [CanActivateGuard, CanDeactivateGuard]\n})\nexport class OrdersRoutingModule {\n  static components = [OrdersComponent, OrderAddComponent, OrdersListComponent];\n}\n","import {Component, OnInit} from '@angular/core';\n\n\n@Component({\n  selector: 'cm-customers-orders',\n  templateUrl: './orders.component.html'\n})\nexport class OrdersComponent implements OnInit {\n\n  value = 'list';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n\n}\n","<div class=\"customers view indent\">\n    <div class=\"container\">\n        <header>\n            <h3>\n                <span class=\"glyphicon glyphicon-folder-open\"></span> Orders\n            </h3>\n        </header>\n        <br />\n      <div class=\"row\">\n        <div class=\"col-md-10\">\n          <div class=\"navbar\">\n            <ul class=\"nav navbar-nav\">\n              <li class=\"toolbar-item\">\n                <a routerLink=\"/orders/list\" routerLinkActive=\"active\">\n                  <span class=\"glyphicon glyphicon-align-justify\"></span> List\n                </a>\n              </li>\n              <li class=\"toolbar-item\">\n                <a routerLink=\"/orders/add/0\"routerLinkActive=\"active\">\n                  <span class=\"glyphicon glyphicon-plus\"></span> New Order\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"container\">\n        <router-outlet></router-outlet>\n      </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { OrdersRoutingModule } from './orders-routing.module';\nimport {CurrencyMaskModule} from 'ng2-currency-mask';\n\n@NgModule({\n  imports: [SharedModule, OrdersRoutingModule, CurrencyMaskModule],\n  declarations: [OrdersRoutingModule.components]\n})\nexport class OrdersModule { }\n"],"sourceRoot":"webpack:///"}